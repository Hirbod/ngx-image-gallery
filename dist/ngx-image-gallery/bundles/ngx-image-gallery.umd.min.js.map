{"version":3,"sources":["ng://ngx-image-gallery/lib/components/ngx-image-gallery/ngx-image-gallery.component.ts","ng://ngx-image-gallery/lib/directives/click-outside.directive.ts","ng://ngx-image-gallery/lib/directives/mousewheel.directive.ts","ng://ngx-image-gallery/lib/index.ts"],"names":["KEY_CODES","37","39","27","DEFAULT_CONF","imageBorderRadius","imageOffset","imagePointer","showDeleteControl","showCloseControl","showExtUrlControl","showImageTitle","showThumbnails","closeOnEsc","reactToKeyboard","reactToMouseWheel","reactToRightClick","thumbnailSize","backdropColor","inline","showArrows","NgxImageGalleryComponent","sanitizer","galleryElem","renderer","_this","this","opened","conf","images","onOpen","EventEmitter","onClose","onDelete","onImageChange","onImageClicked","onError","loading","activeImageIndex","thumbnailMargin","thumbnailsScrollerLeftMargin","fitThumbnails","debounce","thumbnailParams","thumbnailsRenderParams","newThumbnailMargin","debouncedPrev","prev","leading","trailing","debouncedNext","next","Object","defineProperty","prototype","length","thumbnailsContainerWidth","thumbnailsElem","nativeElement","offsetWidth","thumbnailsInView","Math","floor","newThumbnailSize","outThumbnails","setGalleryConf","assign","loadImage","index","galleryImage","_cached","Promise","resolve","reject","image","Image","src","url","onload","onerror","error","activateImage","imageIndex","emit","then","_imageIndex","setTimeout","scrollThumbnails","catch","console","warn","ngOnInit","setStyle","addClass","open","ngOnChanges","changes","firstChange","currentValue","previousValue","onKeyboardInput","event","keyCode","close","onWindowResize","onFirstImage","onLastImage","setActiveImage","deleteImage","mouseWheelUp","mouseWheelDown","clickOnImage","rightClickOnImage","stopPropagation","DomSanitizer","ElementRef","Renderer2","__decorate","HostBinding","Input","Output","ViewChild","HostListener","tslib","Component","selector","template","ClickOutsideDirective","_elementRef","clickOutside","onClick","$event","targetElement","contains","Directive","MouseWheelDirective","onMouseWheelChrome","mouseWheelFunc","onMouseWheelFirefox","onMouseWheelIE","window","delta","max","min","wheelDelta","detail","returnValue","preventDefault","NgxImageGalleryModule","NgModule","imports","CommonModule","declarations","exports"],"mappings":"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","sourcesContent":["import {\n    Component,\n    OnInit,\n    HostBinding,\n    Input,\n    HostListener,\n    ElementRef,\n    Renderer2,\n    EventEmitter,\n    Output,\n    OnChanges,\n    SimpleChanges,\n    ViewChild\n} from '@angular/core';\n\nimport {assign, debounce} from 'lodash';\n\nimport {GALLERY_CONF, GALLERY_IMAGE} from '../../ngx-image-gallery.conf';\nimport { DomSanitizer } from '@angular/platform-browser';\n\n// key codes to react\nconst KEY_CODES = {\n    37: 'LEFT',\n    39: 'RIGHT',\n    27: 'ESC'\n};\n\n// default gallery configuration\nconst DEFAULT_CONF: GALLERY_CONF = {\n    imageBorderRadius: '3px',\n    imageOffset: '20px',\n    imagePointer: false,\n    showDeleteControl: false,\n    showCloseControl: true,\n    showExtUrlControl: true,\n    showImageTitle: true,\n    showThumbnails: true,\n    closeOnEsc: true,\n    reactToKeyboard: true,\n    reactToMouseWheel: true,\n    reactToRightClick: false,\n    thumbnailSize: 30,\n    backdropColor: 'rgba(13,13,14,0.85)',\n    inline: false,\n    showArrows: true\n};\n\n@Component({\n    selector: 'ngx-image-gallery',\n    templateUrl: './ngx-image-gallery.component.html',\n    styleUrls: ['./ngx-image-gallery.component.scss']\n})\nexport class NgxImageGalleryComponent implements OnInit, OnChanges {\n\n    // gallery opened memory\n    @HostBinding('class.active') opened: boolean = false;\n\n    // gallery configuration\n    @Input() conf: GALLERY_CONF = {};\n\n    // gallery images\n    @Input() images: GALLERY_IMAGE[] = [];\n\n    // event emmiters\n    @Output() onOpen = new EventEmitter();\n    @Output() onClose = new EventEmitter();\n    @Output() onDelete = new EventEmitter();\n    @Output() onImageChange = new EventEmitter();\n    @Output() onImageClicked = new EventEmitter();\n    @Output() onError = new EventEmitter();\n\n    // thumbnails container\n    @ViewChild('thumbnails') thumbnailsElem: ElementRef;\n\n    /***************************************************/\n\n    // loading animation memory\n    loading: boolean = false;\n\n    // current active image index\n    activeImageIndex: number = null;\n\n    // thumbnail margin and scroll position\n    thumbnailMargin: string = '0px 8px';\n    thumbnailsScrollerLeftMargin: string = '0px';\n\n    // active image\n    get activeImage(): GALLERY_IMAGE {\n        return this.images[this.activeImageIndex];\n    }\n\n    // if gallery is on : first image\n    get onFirstImage(): boolean {\n        return this.activeImageIndex == 0;\n    }\n\n    // if gallery is on : last image\n    get onLastImage(): boolean {\n        return this.activeImageIndex == (this.images.length - 1);\n    }\n\n    // get thumbnails viewport rendering parameters\n    get thumbnailsRenderParams(): { thumbnailsInView: number, newThumbnailMargin: number, newThumbnailSize: number, thumbnailsScrollerLeftMargin: any } {\n        let thumbnailsContainerWidth = this.thumbnailsElem.nativeElement.offsetWidth;\n\n        let thumbnailMargin = 16;\n        let thumbnailSize = thumbnailMargin + this.conf.thumbnailSize;\n        let thumbnailsInView = Math.floor(thumbnailsContainerWidth / thumbnailSize);\n        let extraSpaceInThumbnailsContainer = thumbnailsContainerWidth - (thumbnailsInView * thumbnailSize);\n        let extraMargin = extraSpaceInThumbnailsContainer / thumbnailsInView;\n\n        let newThumbnailMargin = thumbnailMargin + extraMargin;\n        let newThumbnailSize = newThumbnailMargin + this.conf.thumbnailSize;\n\n        let relativePositionOfActiveImageThumbnailToScroller = thumbnailsInView - (thumbnailsInView - this.activeImageIndex);\n        let thumbnailsScrollerLeftMargin: any;\n\n        if (relativePositionOfActiveImageThumbnailToScroller > thumbnailsInView - 2) {\n            var outThumbnails = ((this.activeImageIndex + 1) - thumbnailsInView) + 1;\n\n            if (this.activeImageIndex != (this.images.length - 1)) {\n                thumbnailsScrollerLeftMargin = '-' + (newThumbnailSize * outThumbnails) + 'px';\n            }\n            else {\n                thumbnailsScrollerLeftMargin = '-' + (newThumbnailSize * (outThumbnails - 1)) + 'px';\n            }\n        } else {\n            thumbnailsScrollerLeftMargin = '0px';\n        }\n\n        return {\n            thumbnailsInView,\n            newThumbnailMargin,\n            newThumbnailSize,\n            thumbnailsScrollerLeftMargin\n        };\n    }\n\n    // set gallery configuration\n    private setGalleryConf(conf: GALLERY_CONF) {\n        this.conf = assign(DEFAULT_CONF, conf);\n    }\n\n    // load image and return promise\n    private loadImage(index: number): Promise<any> {\n        const galleryImage: GALLERY_IMAGE = this.images[index];\n\n        // check if image is cached\n        if (galleryImage._cached) {\n            return Promise.resolve(index);\n        }\n        else {\n            return new Promise((resolve, reject) => {\n                this.loading = true;\n\n                let image = new Image();\n                image.src = galleryImage.url;\n\n                image.onload = () => {\n                    this.loading = false;\n                    galleryImage._cached = true;\n                    resolve(index);\n                };\n\n                image.onerror = (error) => {\n                    this.loading = false;\n                    reject(error);\n                };\n            });\n        }\n    }\n\n    // activate image (set active image)\n    private activateImage(imageIndex: number) {\n        // prevent loading if already loading\n        if (this.loading) return false;\n\n        // emit event\n        this.onImageChange.emit(imageIndex);\n\n        this.loadImage(imageIndex)\n            .then(_imageIndex => {\n                this.activeImageIndex = _imageIndex;\n\n                // scroll thumbnails\n                setTimeout(() => {\n                    this.fitThumbnails();\n                    setTimeout(() => this.scrollThumbnails(), 300);\n                });\n            })\n            .catch(error => { \n                console.warn(error)\n                this.onError.next(error);\n            });\n    }\n\n    // adjust thumbnail margin to perfectly fit viewport\n    private fitThumbnails = debounce(() => {\n        // if thumbnails not visible, return false\n        if (this.conf.showThumbnails == false) return false;\n\n        let thumbnailParams = this.thumbnailsRenderParams;\n        this.thumbnailMargin = '0 ' + (thumbnailParams.newThumbnailMargin / 2) + 'px';\n    }, 300);\n\n    // scroll thumbnails to perfectly position active image thumbnail in viewport\n    private scrollThumbnails() {\n        // if thumbnails not visible, return false\n        if (this.conf.showThumbnails == false) return false;\n\n        let thumbnailParams = this.thumbnailsRenderParams;\n        this.thumbnailsScrollerLeftMargin = thumbnailParams.thumbnailsScrollerLeftMargin;\n    }\n\n    // debounced prev\n    private debouncedPrev = debounce(() => this.prev(), 100, {'leading': true, 'trailing': false});\n\n    // debounced next\n    private debouncedNext = debounce(() => this.next(), 100, {'leading': true, 'trailing': false});\n\n    /***************************************************/\n\n    constructor(\n        public sanitizer: DomSanitizer,\n        private galleryElem: ElementRef,\n        private renderer: Renderer2\n    ) {}\n\n    ngOnInit() {\n        // create final gallery configuration\n        this.setGalleryConf(this.conf);\n\n        // apply backdrop color\n        this.renderer.setStyle(this.galleryElem.nativeElement, 'background-color', this.conf.backdropColor);\n\n        // gallery inline class and auto open\n        if (this.conf.inline) {\n            this.renderer.addClass(this.galleryElem.nativeElement, 'inline');\n            this.open(0);\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        // when gallery configuration changes\n        if (changes.conf && changes.conf.firstChange == false) {\n            this.setGalleryConf(changes.conf.currentValue);\n\n            // apply backdrop color\n            this.renderer.setStyle(this.galleryElem.nativeElement, 'background-color', this.conf.backdropColor);\n\n            // gallery inline class and auto open\n            if ((changes.conf.previousValue.inline != true) && this.conf.inline) {\n                this.renderer.addClass(this.galleryElem.nativeElement, 'inline');\n                this.open(0);\n            }\n        }\n\n        // when gallery images changes\n        if (changes.images && changes.images.firstChange == false) {\n            this.images = changes.images.currentValue;\n\n            if (this.images.length) {\n                this.activateImage(0);\n            }\n        }\n\n    }\n    \n    // keyboard event\n    @HostListener('window:keydown', ['$event'])\n    public onKeyboardInput(event: KeyboardEvent) {\n        if (this.conf.reactToKeyboard && this.opened && !this.loading) {\n            if (KEY_CODES[event.keyCode] == 'RIGHT') {\n                this.next();\n            }\n            else if (KEY_CODES[event.keyCode] == 'LEFT') {\n                this.prev();\n            }\n            else if ((KEY_CODES[event.keyCode] == 'ESC') && this.conf.closeOnEsc) {\n                this.close();\n            }\n        }\n    }\n\n    // window resize event\n    @HostListener('window:resize', ['$event'])\n    public onWindowResize(event: Event) {\n        if (this.opened && !this.loading) {\n            this.fitThumbnails();\n            setTimeout(() => this.scrollThumbnails(), 300);\n        }\n    }\n\n    /***************************************************/\n\n    // open gallery\n    open(index: number = 0) {\n        if (this.images.length) {\n            this.opened = true;\n\n            // emit event\n            this.onOpen.emit(index);\n\n            // activate image at given index\n            this.activateImage(index);\n        }\n        else {\n            console.warn('No images provided to ngx-image-gallery!');\n        }\n    }\n\n    // close gallery\n    close() {\n        this.opened = false;\n        this.activeImageIndex = 0;\n\n        // emit event\n        this.onClose.emit();\n    }\n\n    // change prev image\n    prev() {\n        if (this.onFirstImage == false) {\n            this.activateImage(this.activeImageIndex - 1);\n        }\n    }\n\n    // change next image\n    next() {\n        if (this.onLastImage == false) {\n            this.activateImage(this.activeImageIndex + 1);\n        }\n    }\n\n    // set image (activate)\n    setActiveImage(index: number) {\n        this.activateImage(index);\n    }\n\n    // delete image\n    deleteImage(index: number) {\n        this.onDelete.emit(index);\n    }\n\n    // mouse wheel up (prev image)\n    mouseWheelUp() {\n        if (this.conf.reactToMouseWheel) {\n            this.debouncedNext();\n        }\n    }\n\n    // mouse wheel down (next image)\n    mouseWheelDown() {\n        if (this.conf.reactToMouseWheel) {\n            this.debouncedPrev();\n        }\n    }\n\n    // click on image\n    clickOnImage(index: number) {\n        this.onImageClicked.emit(index);\n    }\n\n    // right click on image\n    rightClickOnImage(event: Event) {\n        event.stopPropagation();\n        return this.conf.reactToRightClick;\n    }\n\n}\n","import { Directive, ElementRef, Output, EventEmitter, HostListener } from '@angular/core';\n\n@Directive({\n  selector: '[clickOutside]'\n})\nexport class ClickOutsideDirective {\n  @Output() clickOutside: EventEmitter<any> = new EventEmitter();\n\n  constructor(private _elementRef: ElementRef) {}\n\n  @HostListener('document:click', ['$event', '$event.target'])\n  public onClick($event, targetElement) {\n    const isClickedInside = this._elementRef.nativeElement.contains(targetElement);\n    if (!isClickedInside) {\n      this.clickOutside.emit($event);\n    }\n  }\n}","import { Directive, Output, HostListener, EventEmitter } from '@angular/core';\n\n@Directive({ selector: '[mouseWheel]' })\nexport class MouseWheelDirective {\n  @Output() mouseWheelUp = new EventEmitter();\n  @Output() mouseWheelDown = new EventEmitter();\n\n  @HostListener('mousewheel', ['$event']) onMouseWheelChrome(event: any) {\n    this.mouseWheelFunc(event);\n  }\n\n  @HostListener('DOMMouseScroll', ['$event']) onMouseWheelFirefox(event: any) {\n    this.mouseWheelFunc(event);\n  }\n\n  @HostListener('onmousewheel', ['$event']) onMouseWheelIE(event: any) {\n    this.mouseWheelFunc(event);\n  }\n\n  mouseWheelFunc(event: any) {\n    var event = window.event || event; // old IE support\n    var delta = Math.max(-1, Math.min(1, (event.wheelDelta || -event.detail)));\n    if(delta > 0) {\n        this.mouseWheelUp.emit(event);\n    } else if(delta < 0) {\n        this.mouseWheelDown.emit(event);\n    }\n    // for IE\n    event.returnValue = false;\n    // for Chrome and Firefox\n    if(event.preventDefault) {\n        event.preventDefault();\n    }\n  }\n}","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\n\nimport {NgxImageGalleryComponent} from './components/ngx-image-gallery/ngx-image-gallery.component';\nimport {ClickOutsideDirective} from './directives/click-outside.directive';\nimport {MouseWheelDirective} from './directives/mousewheel.directive';\n\nexport * from './components/ngx-image-gallery/ngx-image-gallery.component';\nexport * from './directives/click-outside.directive';\nexport * from './directives/mousewheel.directive';\nexport * from './ngx-image-gallery.conf';\n\n@NgModule({\n    imports: [\n        CommonModule\n    ],\n    declarations: [\n        NgxImageGalleryComponent,\n        MouseWheelDirective,\n        ClickOutsideDirective\n    ],\n    exports: [\n        NgxImageGalleryComponent,\n        MouseWheelDirective,\n        ClickOutsideDirective\n    ]\n})\nexport class NgxImageGalleryModule {\n}\n"]}